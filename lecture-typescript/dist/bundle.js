(()=>{"use strict";class e{constructor(){}get totalScore(){return n.getInstance().activeElementsScore.reduce(((e,t)=>e+t),0)}static getInstance(){return e.instance||(e.instance=new e),e.instance}render(){document.querySelector(".score__number").textContent=String(this.totalScore)}}class t{constructor(e){this.element=e,e.addEventListener("click",this.clickEventHandler.bind(this))}clickEventHandler(){this.element.classList.toggle("food--active"),e.getInstance().render()}}class n{constructor(){this.elements=document.querySelectorAll(".food"),this._activeElements=[],this._activeElementsScore=[],this.elements.forEach((e=>{new t(e)}))}get activeElements(){return this._activeElements=[],this.elements.forEach((e=>{e.classList.contains("food--active")&&this._activeElements.push(e)})),this._activeElements}get activeElementsScore(){return this._activeElementsScore=[],this.activeElements.forEach((e=>{const t=e.querySelector(".food__score");t&&this._activeElementsScore.push(Number(t.textContent))})),this._activeElementsScore}static getInstance(){return n.instance||(n.instance=new n),n.instance}}n.getInstance()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDTyxNQUFNQSxFQUNUQyxlQUNJQyxpQkFFQSxPQURjQyxFQUFNQyxjQUNQQyxvQkFBb0JDLFFBQU8sQ0FBQ0MsRUFBT0MsSUFBVUQsRUFBUUMsR0FBTyxHQUU3RUMscUJBSUksT0FIS1QsRUFBTVUsV0FDUFYsRUFBTVUsU0FBVyxJQUFJVixHQUVsQkEsRUFBTVUsU0FFakJDLFNBQ0lDLFNBQVNDLGNBQWMsa0JBQWtCQyxZQUFjQyxPQUFPQyxLQUFLZCxhQ2JwRSxNQUFNZSxFQUNUaEIsWUFBWWlCLEdBQ1JGLEtBQUtFLFFBQVVBLEVBQ2ZBLEVBQVFDLGlCQUFpQixRQUFTSCxLQUFLSSxrQkFBa0JDLEtBQUtMLE9BRWxFSSxvQkFDSUosS0FBS0UsUUFBUUksVUFBVUMsT0FBTyxnQkFDaEJ2QixFQUFNSSxjQUNkTyxVQ1JQLE1BQU1SLEVBQ1RGLGNBQ0llLEtBQUtRLFNBQVdaLFNBQVNhLGlCQUFpQixTQUMxQ1QsS0FBS1UsZ0JBQWtCLEdBQ3ZCVixLQUFLVyxxQkFBdUIsR0FDNUJYLEtBQUtRLFNBQVNJLFNBQVFWLElBQ2xCLElBQUlELEVBQUtDLE1BR2JXLHFCQU9BLE9BTkFiLEtBQUtVLGdCQUFrQixHQUN2QlYsS0FBS1EsU0FBU0ksU0FBUVYsSUFDZEEsRUFBUUksVUFBVVEsU0FBUyxpQkFDM0JkLEtBQUtVLGdCQUFnQkssS0FBS2IsTUFHM0JGLEtBQUtVLGdCQUVackIsMEJBUUEsT0FQQVcsS0FBS1cscUJBQXVCLEdBQzVCWCxLQUFLYSxlQUFlRCxTQUFRVixJQUN4QixNQUFNYyxFQUFZZCxFQUFRTCxjQUFjLGdCQUNwQ21CLEdBQ0FoQixLQUFLVyxxQkFBcUJJLEtBQUtFLE9BQU9ELEVBQVVsQixpQkFHakRFLEtBQUtXLHFCQUVoQmxCLHFCQUlJLE9BSEtOLEVBQU1PLFdBQ1BQLEVBQU1PLFNBQVcsSUFBSVAsR0FFbEJBLEVBQU1PLFVDaENyQlAsRUFBTUMsZSIsInNvdXJjZXMiOlsid2VicGFjazovL2xlY3R1cmUtdHlwZXNjcmlwdC1zYW1wbGUtYXBwLmdpdC8uL2Zvb2QtYXBwL3Njb3JlLnRzIiwid2VicGFjazovL2xlY3R1cmUtdHlwZXNjcmlwdC1zYW1wbGUtYXBwLmdpdC8uL2Zvb2QtYXBwL2Zvb2QudHMiLCJ3ZWJwYWNrOi8vbGVjdHVyZS10eXBlc2NyaXB0LXNhbXBsZS1hcHAuZ2l0Ly4vZm9vZC1hcHAvZm9vZHMudHMiLCJ3ZWJwYWNrOi8vbGVjdHVyZS10eXBlc2NyaXB0LXNhbXBsZS1hcHAuZ2l0Ly4vZm9vZC1hcHAvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb29kcyB9IGZyb20gXCIuL2Zvb2RzXCI7XG5leHBvcnQgY2xhc3MgU2NvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgZ2V0IHRvdGFsU2NvcmUoKSB7XG4gICAgICAgIGNvbnN0IGZvb2RzID0gRm9vZHMuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgcmV0dXJuIGZvb2RzLmFjdGl2ZUVsZW1lbnRzU2NvcmUucmVkdWNlKCh0b3RhbCwgc2NvcmUpID0+IHRvdGFsICsgc2NvcmUsIDApO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghU2NvcmUuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIFNjb3JlLmluc3RhbmNlID0gbmV3IFNjb3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNjb3JlLmluc3RhbmNlO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zY29yZV9fbnVtYmVyJykudGV4dENvbnRlbnQgPSBTdHJpbmcodGhpcy50b3RhbFNjb3JlKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTY29yZSB9IGZyb20gXCIuL3Njb3JlXCI7XG5leHBvcnQgY2xhc3MgRm9vZCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0V2ZW50SGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgY2xpY2tFdmVudEhhbmRsZXIoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdmb29kLS1hY3RpdmUnKTtcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBTY29yZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBzY29yZS5yZW5kZXIoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGb29kIH0gZnJvbSBcIi4vZm9vZFwiO1xuZXhwb3J0IGNsYXNzIEZvb2RzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb29kJyk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnRzID0gW107XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnRzU2NvcmUgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgbmV3IEZvb2QoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlRWxlbWVudHMoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnRzID0gW107XG4gICAgICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZm9vZC0tYWN0aXZlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUVsZW1lbnRzO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlRWxlbWVudHNTY29yZSgpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudHNTY29yZSA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZUVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBmb29kU2NvcmUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb29kX19zY29yZScpO1xuICAgICAgICAgICAgaWYgKGZvb2RTY29yZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnRzU2NvcmUucHVzaChOdW1iZXIoZm9vZFNjb3JlLnRleHRDb250ZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlRWxlbWVudHNTY29yZTtcbiAgICB9XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICBpZiAoIUZvb2RzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICBGb29kcy5pbnN0YW5jZSA9IG5ldyBGb29kcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGb29kcy5pbnN0YW5jZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGb29kcyB9IGZyb20gXCIuL2Zvb2RzXCI7XG5Gb29kcy5nZXRJbnN0YW5jZSgpO1xuIl0sIm5hbWVzIjpbIlNjb3JlIiwiY29uc3RydWN0b3IiLCJ0b3RhbFNjb3JlIiwiRm9vZHMiLCJnZXRJbnN0YW5jZSIsImFjdGl2ZUVsZW1lbnRzU2NvcmUiLCJyZWR1Y2UiLCJ0b3RhbCIsInNjb3JlIiwic3RhdGljIiwiaW5zdGFuY2UiLCJyZW5kZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsIlN0cmluZyIsInRoaXMiLCJGb29kIiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGlja0V2ZW50SGFuZGxlciIsImJpbmQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJlbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfYWN0aXZlRWxlbWVudHMiLCJfYWN0aXZlRWxlbWVudHNTY29yZSIsImZvckVhY2giLCJhY3RpdmVFbGVtZW50cyIsImNvbnRhaW5zIiwicHVzaCIsImZvb2RTY29yZSIsIk51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=